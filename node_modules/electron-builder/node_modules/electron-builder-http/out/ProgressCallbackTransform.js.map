{
  "version": 3,
  "file": "ProgressCallbackTransform.js",
  "sourceRoot": "",
  "sources": [
    "../src/ProgressCallbackTransform.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AAAA,AAAO,AAAE,AAAS,AAAE,AAAM,AAAQ,AAUlC,AAAM;;;;MAAiC,AAAQ,AAAS;AAOtD,gBAAoB,AAAa,OAAU,AAAuC;AAChF,AAAK,AAAE;AADW,aAAK,QAAL,AAAK,AAAQ;AAAU,aAAU,aAAV,AAAU,AAA6B;AAN1E,aAAK,QAAG,AAAI,KAAC,AAAG,AAAE;AAClB,aAAW,cAAG,AAAC;AACf,aAAK,QAAG,AAAC;AAET,aAAU,aAAG,AAAI,KAAC,AAAK,QAAG,AAAI,AAItC;AAAC;AAED,AAAU,eAAC,AAAU,OAAE,AAAgB,UAAE,AAAkB;AACzD,AAAI,aAAC,AAAW,eAAI,AAAK,MAAC,AAAM;AAChC,AAAI,aAAC,AAAK,SAAI,AAAK,MAAC,AAAM;AAE1B,cAAM,AAAG,MAAG,AAAI,KAAC,AAAG,AAAE;AACtB,AAAE,AAAC,YAAC,AAAG,OAAI,AAAI,KAAC,AAAU,cAAI,AAAI,KAAC,AAAW,eAAI,AAAI,KAAC,AAAK,MAAC,AAA+B,AAAC,iCAAC,AAAC;AAC7F,AAAI,qBAAC,AAAU,aAAG,AAAG,MAAG,AAAI;AAE5B,AAAI,qBAAC,AAAU;AACb,AAAK,2BAAE,AAAI,KAAC,AAAK;AACjB,AAAK,2BAAE,AAAI,KAAC,AAAK;AACjB,AAAW,iCAAE,AAAI,KAAC,AAAW;AAC7B,AAAO,6BAAG,AAAI,KAAC,AAAW,cAAG,AAAI,KAAC,AAAK,AAAC,KAA/B,GAAkC,AAAG;AAC9C,AAAc,oCAAE,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAW,AAAG,eAAC,CAAC,AAAG,MAAG,AAAI,KAAC,AAAK,AAAC,SAAG,AAAI,AAAC,AAAC,AAC3E,AAAC;AAN4B;AAO9B,AAAI,qBAAC,AAAK,QAAG,AAAC,AAChB;AAAC;AAED,AAAQ,iBAAC,AAAI,MAAE,AAAK,AAAC,AACvB;AAAC;AAED,AAAM,WAAC,AAAkB;AACvB,AAAI,aAAC,AAAU;AACb,AAAK,mBAAE,AAAI,KAAC,AAAK;AACjB,AAAK,mBAAE,AAAI,KAAC,AAAK;AACjB,AAAW,yBAAE,AAAI,KAAC,AAAK;AACvB,AAAO,qBAAE,AAAG;AACZ,AAAc,4BAAE,AAAI,KAAC,AAAK,MAAC,AAAI,KAAC,AAAW,AAAG,eAAC,CAAC,AAAI,KAAC,AAAG,AAAE,QAAG,AAAI,KAAC,AAAK,AAAC,SAAG,AAAI,AAAC,AAAC,AAClF,AAAC;AAN4B;AAO9B,AAAI,aAAC,AAAK,QAAG,AAAC;AAEd,AAAQ,iBAAC,AAAI,AAAC,AAChB;AAAC,AACF",
  "sourcesContent": [
    "import { Transform } from \"stream\"\n\nexport interface ProgressInfo {\n  total: number\n  delta: number\n  transferred: number\n  percent: number\n  bytesPerSecond: number\n}\n\nexport class ProgressCallbackTransform extends Transform {\n  private start = Date.now()\n  private transferred = 0\n  private delta = 0\n\n  private nextUpdate = this.start + 1000\n\n  constructor(private total: number, private onProgress: (info: ProgressInfo) => any) {\n    super()\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    this.transferred += chunk.length\n    this.delta += chunk.length\n\n    const now = Date.now()\n    if (now >= this.nextUpdate && this.transferred != this.total /* will be emitted on _flush */) {\n      this.nextUpdate = now + 1000\n\n      this.onProgress(<ProgressInfo>{\n        total: this.total,\n        delta: this.delta,\n        transferred: this.transferred,\n        percent: (this.transferred / this.total) * 100,\n        bytesPerSecond: Math.round(this.transferred / ((now - this.start) / 1000))\n      })\n      this.delta = 0\n    }\n\n    callback(null, chunk)\n  }\n\n  _flush(callback: Function): void {\n    this.onProgress(<ProgressInfo>{\n      total: this.total,\n      delta: this.delta,\n      transferred: this.total,\n      percent: 100,\n      bytesPerSecond: Math.round(this.transferred / ((Date.now() - this.start) / 1000))\n    })\n    this.delta = 0\n\n    callback(null)\n  }\n}\n"
  ]
}
