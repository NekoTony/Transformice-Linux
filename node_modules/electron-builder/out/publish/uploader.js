"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uploadFile = uploadFile;

var _progress;

function _load_progress() {
    return _progress = _interopRequireDefault(require("progress"));
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _ProgressCallbackTransform;

function _load_ProgressCallbackTransform() {
    return _ProgressCallbackTransform = require("electron-builder-http/out/ProgressCallbackTransform");
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function uploadFile(file, fileStat, fileName, request, reject) {
    const progressBar = process.stdin.isTTY ? new (_progress || _load_progress()).default(`Uploading ${fileName} [:bar] :percent :etas`, {
        total: fileStat.size,
        incomplete: " ",
        stream: process.stdout,
        width: 20
    }) : null;
    const fileInputStream = (0, (_fsExtraP || _load_fsExtraP()).createReadStream)(file);
    fileInputStream.on("error", reject);
    let stream = fileInputStream;
    if (progressBar != null) {
        stream = stream.pipe(new (_ProgressCallbackTransform || _load_ProgressCallbackTransform()).ProgressCallbackTransform(fileStat.size, it => progressBar.tick(it.delta)));
    }
    stream.pipe(request);
}
//# sourceMappingURL=uploader.js.map