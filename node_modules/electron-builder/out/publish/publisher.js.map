{
  "version": 3,
  "file": "publisher.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/publisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { ClientRequest } from \"http\"\nimport { uploadFile } from \"./uploader\"\nimport { stat } from \"fs-extra-p\"\nimport { basename } from \"path\"\nimport { BuildInfo } from \"../packagerApi\"\nimport { PublishConfiguration, GithubOptions, BintrayOptions, GenericServerOptions } from \"electron-builder-http/out/publishOptions\"\n\nexport type PublishPolicy = \"onTag\" | \"onTagOrDraft\" | \"always\" | \"never\"\n\nexport interface PublishOptions {\n  publish?: PublishPolicy | null\n\n  draft?: boolean\n  prerelease?: boolean\n}\n\nexport abstract class Publisher {\n  async upload(file: string, artifactName?: string): Promise<any> {\n    const fileName = artifactName || basename(file)\n    const fileStat = await stat(file)\n    await this.doUpload(fileName, fileStat.size, uploadFile.bind(this, file, fileStat, fileName))\n  }\n\n  uploadData(data: Buffer, fileName: string): Promise<any> {\n    if (data == null || fileName == null) {\n      throw new Error(\"data or fileName is null\")\n    }\n    return this.doUpload(fileName, data.length, it => it.end(data))\n  }\n\n  protected abstract doUpload(fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<any>\n}\n\nexport async function getResolvedPublishConfig(packager: BuildInfo, publishConfig: PublishConfiguration, errorIfCannot: boolean): Promise<PublishConfiguration | null> {\n  if (publishConfig.provider === \"generic\") {\n    if ((<GenericServerOptions>publishConfig).url == null) {\n      throw new Error(`Please specify \"url\" for \"generic\" update server`)\n    }\n    return publishConfig\n  }\n\n  async function getInfo() {\n    const info = await packager.repositoryInfo\n    if (info != null) {\n      return info\n    }\n\n    if (!errorIfCannot) {\n      return null\n    }\n\n    throw new Error(`Cannot detect repository by .git/config. Please specify \"repository\" in the package.json (https://docs.npmjs.com/files/package.json#repository).\\nPlease see https://github.com/electron-userland/electron-builder/wiki/Publishing-Artifacts`)\n  }\n\n  let owner = publishConfig.owner\n  let project = publishConfig.provider === \"github\" ? (<GithubOptions>publishConfig).repo : (<BintrayOptions>publishConfig).package\n  if (!owner || !project) {\n    const info = await getInfo()\n    if (info == null) {\n      return null\n    }\n\n    if (!owner) {\n      owner = info.user\n    }\n    if (!project) {\n      project = info.project\n    }\n  }\n\n  const copy: PublishConfiguration = Object.assign({}, publishConfig)\n  if (copy.owner == null) {\n    copy.owner = owner\n  }\n\n  if (publishConfig.provider === \"github\") {\n    const options = <GithubOptions>copy\n    if (options.repo == null) {\n      options.repo = project\n    }\n    return options\n  }\n  else if (publishConfig.provider === \"bintray\") {\n    const options = <BintrayOptions>copy\n    if (options.package == null) {\n      options.package = project\n    }\n    return options\n  }\n  else {\n    return null\n  }\n}\n\nexport function getCiTag() {\n  const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG || process.env.CI_BUILD_TAG\n  return tag != null && tag.length > 0 ? tag : null\n}"
  ]
}
