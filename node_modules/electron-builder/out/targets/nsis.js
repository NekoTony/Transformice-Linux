"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

var _bluebirdLstC2;

function _load_bluebirdLstC2() {
    return _bluebirdLstC2 = _interopRequireDefault(require("bluebird-lst-c"));
}

var _electronBuilderUtil;

function _load_electronBuilderUtil() {
    return _electronBuilderUtil = require("electron-builder-util");
}

var _path = _interopRequireWildcard(require("path"));

var _binDownload;

function _load_binDownload() {
    return _binDownload = require("electron-builder-util/out/binDownload");
}

var _uuid;

function _load_uuid() {
    return _uuid = require("uuid-1345");
}

var _platformPackager;

function _load_platformPackager() {
    return _platformPackager = require("../platformPackager");
}

var _archive;

function _load_archive() {
    return _archive = require("./archive");
}

var _log;

function _load_log() {
    return _log = require("electron-builder-util/out/log");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _electronBuilderCore;

function _load_electronBuilderCore() {
    return _electronBuilderCore = require("electron-builder-core");
}

var _sanitizeFilename;

function _load_sanitizeFilename() {
    return _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));
}

var _fs;

function _load_fs() {
    return _fs = require("electron-builder-util/out/fs");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NSIS_VERSION = "3.0.1.5";
//noinspection SpellCheckingInspection
const NSIS_SHA2 = "cf996b4209f302c1f6b379a6b2090ad0d51a360daf24d1828eeceafd1617a976";
//noinspection SpellCheckingInspection
const ELECTRON_BUILDER_NS_UUID = "50e065bc-3134-11e6-9bab-38c9862bdaf3";
const nsisPathPromise = (0, (_binDownload || _load_binDownload()).getBinFromBintray)("nsis", NSIS_VERSION, NSIS_SHA2);
const USE_NSIS_BUILT_IN_COMPRESSOR = false;
class NsisTarget extends (_electronBuilderCore || _load_electronBuilderCore()).Target {
    constructor(packager, outDir) {
        super("nsis");
        this.packager = packager;
        this.outDir = outDir;
        this.options = this.packager.config.nsis || Object.create(null);
        this.archs = new Map();
        this.nsisTemplatesDir = _path.join(__dirname, "..", "..", "templates", "nsis");
        const deps = packager.info.metadata.dependencies;
        if (deps != null && deps["electron-squirrel-startup"] != null) {
            (0, (_log || _load_log()).warn)('"electron-squirrel-startup" dependency is not required for NSIS');
        }
    }
    build(appOutDir, arch) {
        var _this = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            _this.archs.set(arch, appOutDir);
        })();
    }
    doBuild(appOutDir, arch) {
        var _this2 = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            (0, (_log || _load_log()).log)(`Packaging NSIS installer for arch ${(_electronBuilderCore || _load_electronBuilderCore()).Arch[arch]}`);
            yield (0, (_fs || _load_fs()).copyFile)(_path.join((yield nsisPathPromise), "elevate.exe"), _path.join(appOutDir, "resources", "elevate.exe"), null, false);
            const packager = _this2.packager;
            const format = _this2.options.useZip ? "zip" : "7z";
            const archiveFile = _path.join(_this2.outDir, `${packager.appInfo.name}-${packager.appInfo.version}-${(_electronBuilderCore || _load_electronBuilderCore()).Arch[arch]}.nsis.${format}`);
            return yield (0, (_archive || _load_archive()).archive)(packager.config.compression, format, archiveFile, appOutDir, true);
        })();
    }
    finishBuild() {
        var _this3 = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            (0, (_log || _load_log()).log)("Building NSIS installer");
            const filesToDelete = [];
            try {
                yield _this3.buildInstaller(filesToDelete);
            } finally {
                if (filesToDelete.length > 0) {
                    yield (_bluebirdLstC2 || _load_bluebirdLstC2()).default.map(filesToDelete, function (it) {
                        return (0, (_fsExtraP || _load_fsExtraP()).unlink)(it);
                    });
                }
            }
        })();
    }
    buildInstaller(filesToDelete) {
        var _this4 = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            const packager = _this4.packager;
            const appInfo = packager.appInfo;
            const version = appInfo.version;
            const installerFilename = `${appInfo.productFilename} Setup ${version}.exe`;
            const options = _this4.options;
            const iconPath = (yield packager.getResource(options.installerIcon, "installerIcon.ico")) || (yield packager.getIconPath());
            const oneClick = options.oneClick !== false;
            const installerPath = _path.join(_this4.outDir, installerFilename);
            const guid = options.guid || (yield (_bluebirdLstC2 || _load_bluebirdLstC2()).default.promisify((_uuid || _load_uuid()).v5)({ namespace: ELECTRON_BUILDER_NS_UUID, name: appInfo.id }));
            const defines = {
                APP_ID: appInfo.id,
                APP_GUID: guid,
                PRODUCT_NAME: appInfo.productName,
                PRODUCT_FILENAME: appInfo.productFilename,
                APP_FILENAME: (!oneClick || options.perMachine === true) && /^[-_+0-9a-zA-Z ]+$/.test(appInfo.productFilename) ? appInfo.productFilename : appInfo.name,
                APP_DESCRIPTION: appInfo.description,
                VERSION: version,
                COMPANY_NAME: appInfo.companyName,
                PROJECT_DIR: packager.projectDir,
                BUILD_RESOURCES_DIR: packager.buildResourcesDir
            };
            if (iconPath != null) {
                defines.MUI_ICON = iconPath;
                defines.MUI_UNICON = iconPath;
            }
            if (_this4.archs.size === 1 && USE_NSIS_BUILT_IN_COMPRESSOR) {
                defines.APP_BUILD_DIR = _this4.archs.get(_this4.archs.keys().next().value);
            } else {
                yield (_bluebirdLstC2 || _load_bluebirdLstC2()).default.map(_this4.archs.keys(), (() => {
                    var _ref = (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* (arch) {
                        const file = yield _this4.doBuild(_this4.archs.get(arch), arch);
                        defines[arch === (_electronBuilderCore || _load_electronBuilderCore()).Arch.x64 ? "APP_64" : "APP_32"] = file;
                        filesToDelete.push(file);
                    });

                    return function (_x) {
                        return _ref.apply(this, arguments);
                    };
                })());
            }
            const installerHeader = oneClick ? null : yield packager.getResource(options.installerHeader, "installerHeader.bmp");
            if (installerHeader != null) {
                defines.MUI_HEADERIMAGE = null;
                defines.MUI_HEADERIMAGE_RIGHT = null;
                defines.MUI_HEADERIMAGE_BITMAP = installerHeader;
            }
            const installerHeaderIcon = oneClick ? yield packager.getResource(options.installerHeaderIcon, "installerHeaderIcon.ico") : null;
            if (installerHeaderIcon != null) {
                defines.HEADER_ICO = installerHeaderIcon;
            }
            if (options.perMachine === true) {
                defines.INSTALL_MODE_PER_ALL_USERS = null;
            }
            if (!oneClick || options.perMachine === true) {
                defines.INSTALL_MODE_PER_ALL_USERS_REQUIRED = null;
            }
            if (oneClick) {
                if (options.runAfterFinish !== false) {
                    defines.RUN_AFTER_FINISH = null;
                }
            } else if (options.allowElevation !== false) {
                defines.MULTIUSER_INSTALLMODE_ALLOW_ELEVATION = null;
            }
            if (options.allowToChangeInstallationDirectory) {
                if (oneClick) {
                    throw new Error("allowToChangeInstallationDirectory makes sense only for boring installer (please set oneClick to false)");
                }
                defines.allowToChangeInstallationDirectory = null;
            }
            // Error: invalid VIProductVersion format, should be X.X.X.X
            // so, we must strip beta
            const localeId = options.language || "1033";
            const versionKey = [`/LANG=${localeId} ProductName "${appInfo.productName}"`, `/LANG=${localeId} ProductVersion "${appInfo.version}"`, `/LANG=${localeId} CompanyName "${appInfo.companyName}"`, `/LANG=${localeId} LegalCopyright "${appInfo.copyright}"`, `/LANG=${localeId} FileDescription "${appInfo.description}"`, `/LANG=${localeId} FileVersion "${appInfo.buildVersion}"`];
            (0, (_electronBuilderUtil || _load_electronBuilderUtil()).use)(packager.platformSpecificBuildOptions.legalTrademarks, function (it) {
                return versionKey.push(`/LANG=${localeId} LegalTrademarks "${it}"`);
            });
            const commands = {
                OutFile: `"${installerPath}"`,
                VIProductVersion: appInfo.versionInWeirdWindowsForm,
                VIAddVersionKey: versionKey,
                Unicode: true
            };
            if (packager.config.compression === "store") {
                commands.SetCompress = "off";
            } else {
                commands.SetCompressor = "lzma";
                defines.COMPRESS = "auto";
            }
            if (_this4.options.useZip) {
                defines.ZIP_COMPRESSION = null;
            }
            defines.COMPRESSION_METHOD = _this4.options.useZip ? "zip" : "7z";
            if (oneClick) {
                defines.ONE_CLICK = null;
            }
            if (options.menuCategory != null) {
                const menu = (0, (_sanitizeFilename || _load_sanitizeFilename()).default)(options.menuCategory === true ? appInfo.companyName : options.menuCategory);
                if (!(0, (_electronBuilderUtil || _load_electronBuilderUtil()).isEmptyOrSpaces)(menu)) {
                    defines.MENU_FILENAME = menu;
                }
            }
            (0, (_electronBuilderUtil || _load_electronBuilderUtil()).debug)(defines);
            (0, (_electronBuilderUtil || _load_electronBuilderUtil()).debug)(commands);
            if (packager.packagerOptions.effectiveOptionComputed != null && (yield packager.packagerOptions.effectiveOptionComputed([defines, commands]))) {
                return;
            }
            const licenseFile = yield packager.getResource(options.license, "license.rtf", "license.txt");
            if (licenseFile != null) {
                defines.LICENSE_FILE = licenseFile;
            }
            const customScriptPath = yield packager.getResource(options.script, "installer.nsi");
            const script = yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(customScriptPath || _path.join(_this4.nsisTemplatesDir, "installer.nsi"), "utf8");
            if (customScriptPath == null) {
                const uninstallerPath = yield packager.getTempFile("uninstaller.exe");
                const isWin = process.platform === "win32";
                defines.BUILD_UNINSTALLER = null;
                defines.UNINSTALLER_OUT_FILE = isWin ? uninstallerPath : _path.win32.join("Z:", uninstallerPath);
                yield (0, (_log || _load_log()).subTask)(`Executing makensis — uninstaller`, _this4.executeMakensis(defines, commands, false, script));
                yield (0, (_electronBuilderUtil || _load_electronBuilderUtil()).exec)(isWin ? installerPath : "wine", isWin ? [] : [installerPath]);
                yield packager.sign(uninstallerPath);
                delete defines.BUILD_UNINSTALLER;
                // platform-specific path, not wine
                defines.UNINSTALLER_OUT_FILE = uninstallerPath;
            } else {
                (0, (_log || _load_log()).log)("Custom NSIS script is used - uninstaller is not signed by electron-builder");
            }
            yield (0, (_log || _load_log()).subTask)(`Executing makensis — installer`, _this4.executeMakensis(defines, commands, true, script));
            yield packager.sign(installerPath);
            packager.dispatchArtifactCreated(installerPath, _this4, `${packager.appInfo.name}-Setup-${version}.exe`);
        })();
    }
    executeMakensis(defines, commands, isInstaller, originalScript) {
        var _this5 = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            const args = _this5.options.warningsAsErrors === false ? [] : ["-WX"];
            for (const name of Object.keys(defines)) {
                const value = defines[name];
                if (value == null) {
                    args.push(`-D${name}`);
                } else {
                    args.push(`-D${name}=${value}`);
                }
            }
            for (const name of Object.keys(commands)) {
                const value = commands[name];
                if (Array.isArray(value)) {
                    for (const c of value) {
                        args.push(`-X${name} ${c}`);
                    }
                } else {
                    args.push(`-X${name} ${value}`);
                }
            }
            args.push("-");
            const binDir = process.platform === "darwin" ? "mac" : process.platform === "win32" ? "Bin" : "linux";
            const nsisPath = yield nsisPathPromise;
            let script = originalScript;
            const packager = _this5.packager;
            const customInclude = yield packager.getResource(_this5.options.include, "installer.nsh");
            if (customInclude != null) {
                script = `!include "${customInclude}"\n!addincludedir "${packager.buildResourcesDir}"\n${script}`;
            }
            const fileAssociations = packager.fileAssociations;
            if (fileAssociations.length !== 0) {
                if (_this5.options.perMachine !== true) {
                    // https://github.com/electron-userland/electron-builder/issues/772
                    throw new Error(`Please set perMachine to true — file associations works on Windows only if installed for all users`);
                }
                script = "!include FileAssociation.nsh\n" + script;
                if (isInstaller) {
                    let registerFileAssociationsScript = "";
                    for (const item of fileAssociations) {
                        const extensions = (0, (_electronBuilderUtil || _load_electronBuilderUtil()).asArray)(item.ext).map((_platformPackager || _load_platformPackager()).normalizeExt);
                        for (const ext of extensions) {
                            const customIcon = yield packager.getResource(item.icon, `${extensions[0]}.ico`);
                            let installedIconPath = "$appExe,0";
                            if (customIcon != null) {
                                installedIconPath = `$INSTDIR\\resources\\${_path.basename(customIcon)}`;
                                //noinspection SpellCheckingInspection
                                registerFileAssociationsScript += `  File "/oname=${installedIconPath}" "${customIcon}"\n`;
                            }
                            const icon = `"${installedIconPath}"`;
                            const commandText = `"Open with ${packager.appInfo.productName}"`;
                            const command = '"$appExe $\\"%1$\\""';
                            registerFileAssociationsScript += `  !insertmacro APP_ASSOCIATE "${ext}" "${item.name || ext}" "${item.description || ""}" ${icon} ${commandText} ${command}\n`;
                        }
                    }
                    script = `!macro registerFileAssociations\n${registerFileAssociationsScript}!macroend\n${script}`;
                } else {
                    let unregisterFileAssociationsScript = "";
                    for (const item of fileAssociations) {
                        for (const ext of (0, (_electronBuilderUtil || _load_electronBuilderUtil()).asArray)(item.ext)) {
                            unregisterFileAssociationsScript += `  !insertmacro APP_UNASSOCIATE "${(0, (_platformPackager || _load_platformPackager()).normalizeExt)(ext)}" "${item.name || ext}"\n`;
                        }
                    }
                    script = `!macro unregisterFileAssociations\n${unregisterFileAssociationsScript}!macroend\n${script}`;
                }
            }
            if ((_electronBuilderUtil || _load_electronBuilderUtil()).debug.enabled) {
                process.stdout.write("\n\nNSIS script:\n\n" + script + "\n\n---\nEnd of NSIS script.\n\n");
            }
            yield new (_bluebirdLstC2 || _load_bluebirdLstC2()).default(function (resolve, reject) {
                const command = _path.join(nsisPath, binDir, process.platform === "win32" ? "makensis.exe" : "makensis");
                const childProcess = (0, (_electronBuilderUtil || _load_electronBuilderUtil()).doSpawn)(command, args, {
                    // we use NSIS_CONFIG_CONST_DATA_PATH=no to build makensis on Linux, but in any case it doesn't use stubs as MacOS/Windows version, so, we explicitly set NSISDIR
                    env: Object.assign({}, process.env, { NSISDIR: nsisPath }),
                    cwd: _this5.nsisTemplatesDir
                }, true);
                (0, (_electronBuilderUtil || _load_electronBuilderUtil()).handleProcess)("close", childProcess, command, resolve, reject);
                childProcess.stdin.end(script);
            });
        })();
    }
}
exports.default = NsisTarget; //# sourceMappingURL=nsis.js.map